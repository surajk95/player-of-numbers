{"version":3,"sources":["components/mobile-no-access/mobile screen.svg","components/input.js","components/score.js","components/mobile-no-access/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","state","word","handleChange","event","value","target","isNaN","setState","handleSubmit","preventDefault","trim","props","validateAnswer","onSubmit","this","placeholder","onChange","autoFocus","React","Component","Score","className","speed","score","Mobile","src","NoAccess","alt","App","errorMessage","error","words","modes","mode","x","y","maxLimitX","maxLimitY","solution","startTime","Date","generatePuzzle","i","Math","floor","random","resetState","changeMode","answer","parseInt","startTimer","endTimer","timeDiff","round","getModeSymbol","changeMax","dimension","map","item","index","key","type","name","checked","style","marginLeft","e","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87e482ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mobile screen.87c15afc.svg\";","import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n    state = {\r\n        word: ''\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const value = event.target.value;\r\n        if(isNaN(value) && value!=='-') {\r\n            return;\r\n        }\r\n        this.setState({ word: value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.word.trim() !== '') {\r\n            this.props.validateAnswer(this.state.word);\r\n            this.setState({ word: '' });\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        placeholder=\"Enter your answer here\"\r\n                        value={this.state.word}\r\n                        onChange={this.handleChange}\r\n                        autoFocus\r\n                    />\r\n                </form>\r\n            </>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nexport default function Score(props) {\r\n    return (\r\n        <div className=\"scoreContainer\">\r\n            <span className=\"speed\">\r\n                {props.speed}\r\n            </span>\r\n            &nbsp;<span className=\"passive\">calculations per minute, score: </span>&nbsp; \r\n            <span className=\"score passive\">\r\n                {props.score} \r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport NoAccess from './mobile screen.svg';\r\nimport './index.css';\r\n\r\nexport default function Mobile() {\r\n    return (\r\n        <div className=\"mobileContainer\">\r\n            <img src={NoAccess} alt=\"no access\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Input from './components/input';\r\nimport Score from './components/score';\r\nimport MobileNoAccess from './components/mobile-no-access';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    errorMessage: '',\r\n    error: false,\r\n    words: [],\r\n    score :0,\r\n    modes: ['multiply', 'add', 'subtract'],\r\n    mode: 'multiply',\r\n    x: 0,\r\n    y: 0,\r\n    maxLimitX: 2,\r\n    maxLimitY: 1,\r\n    solution: 0,\r\n    startTime: new Date(),\r\n    speed: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generatePuzzle();\r\n  }\r\n\r\n  generatePuzzle = () => {\r\n    const { maxLimitX, maxLimitY, mode } = this.state;\r\n    let i=0, x=0, y=0;\r\n    while(i<maxLimitX) {\r\n      x = x*10 + Math.floor(Math.random()*10);\r\n      i++;\r\n    }\r\n    i=0;\r\n    while(i<maxLimitY) {\r\n      y = y*10 + Math.floor(Math.random()*10);\r\n      i++;\r\n    }\r\n    const solution = mode==='multiply' ? (x*y) : mode==='add' ? (x+y) : (x-y);\r\n    this.setState({ x, y, solution });\r\n  }\r\n\r\n  resetState = (mode='multiply') => {\r\n    this.setState({\r\n      score: 0,\r\n      speed: 0,\r\n      words: [],\r\n      mode,\r\n      error: false,\r\n      errorMessage: '',\r\n      solution: -999999,\r\n    }, () => {\r\n      this.generatePuzzle();\r\n    });\r\n  }\r\n  changeMode = (value) => {\r\n    this.resetState(value);\r\n  }\r\n\r\n  validateAnswer = (word) => {\r\n    const answer = parseInt(word);\r\n    const { solution, mode } = this.state;\r\n    if(answer !== solution) {\r\n      this.setState({ error: true, errorMessage: `Not the right answer`});\r\n    }\r\n    else {\r\n      if(this.state.score === 0) {\r\n        this.setState({ speed: 1 });\r\n        this.startTimer();\r\n      } \r\n      else\r\n        this.endTimer();\r\n      this.setState({ error: false, score: this.state.score+1 });\r\n      this.generatePuzzle();\r\n    }\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.setState({ startTime: new Date() });\r\n  };\r\n  \r\n  endTimer = () => {\r\n    if(this.state.score === 0)\r\n      return; \r\n    let endTime = new Date();\r\n    var timeDiff = endTime - this.state.startTime; //in ms\r\n    //Strip the ms, convert to minutes.\r\n    timeDiff /= 1000*60;\r\n    let speed = Math.round(this.state.score/timeDiff, 3);\r\n    //console.log(speed);\r\n    this.setState({ speed });\r\n  }\r\n\r\n  getModeSymbol = () => {\r\n    const { mode } = this.state;\r\n    switch(mode) {\r\n      case 'multiply':\r\n        return 'x';\r\n      case 'add':\r\n        return '+';\r\n      case 'subtract':\r\n        return '-';\r\n      default:\r\n        return 'x';\r\n    }\r\n  }\r\n\r\n  changeMax = (dimension, value, mode) => {\r\n    this.setState({ [dimension]: value }, this.resetState(mode));\r\n  }\r\n\r\n  render() {\r\n    const { x, y, maxLimitX, maxLimitY, modes, mode } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <MobileNoAccess />\r\n        <div className=\"header\">\r\n          PLAYER OF NUMBERS\r\n        </div>\r\n        <div className=\"mode\">\r\n          <div className=\"item active\">{x} {this.getModeSymbol()} {y}</div>\r\n        </div>\r\n        <div className=\"subtitle\">\r\n          <div className=\"suffix\">\r\n            {\r\n              modes.map((item, index) => {\r\n                return (\r\n                <span key={index} className={mode===item ? 'activeMode' : ''}>\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"suffix\"\r\n                    checked={mode==item}\r\n                    onChange={()=>this.changeMode(item)}\r\n                  />\r\n                  {item}\r\n                </span>\r\n              )})\r\n            }\r\n            <span style={{ marginLeft: '25px'}}>Limit LHS to</span> <input\r\n                    type=\"text\"\r\n                    name=\"limit\"\r\n                    placeholder=\"Ex. 2\"\r\n                    onChange={(e)=>this.changeMax('maxLimitX', e.target.value, mode)}\r\n                    value={maxLimitX}\r\n                    className=\"limitInput\"\r\n                  /><span> digits</span>\r\n            <span style={{ marginLeft: '25px'}}>Limit RHS to</span> <input\r\n                    type=\"text\"\r\n                    name=\"limit\"\r\n                    placeholder=\"Ex. 1\"\r\n                    onChange={(e)=>this.changeMax('maxLimitY', e.target.value, mode)}\r\n                    value={maxLimitY}\r\n                    className=\"limitInput\"\r\n                  /><span> digits</span>\r\n          </div>\r\n        </div>\r\n        <button className=\"reset\" onClick={()=>this.resetState(mode)}>\r\n          Reset\r\n        </button>\r\n        <Input validateAnswer={this.validateAnswer} />\r\n        <div className=\"errorMessage\">\r\n          {\r\n            this.state.error &&\r\n            this.state.errorMessage\r\n          }\r\n         </div>\r\n        <Score\r\n          score={this.state.score}\r\n          speed={this.state.speed}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}