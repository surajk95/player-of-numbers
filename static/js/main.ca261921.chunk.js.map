{"version":3,"sources":["components/input.js","components/score.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","word","handleChange","event","value","target","isNaN","setState","handleSubmit","preventDefault","trim","props","validateAnswer","onSubmit","this","placeholder","onChange","autoFocus","React","Component","Score","className","speed","score","App","errorMessage","error","words","modes","mode","x","y","maxLimitX","maxLimitY","solution","startTime","Date","generatePuzzle","i","Math","floor","random","resetState","changeMode","answer","parseInt","startTimer","endTimer","timeDiff","round","getModeSymbol","changeMax","dimension","map","item","index","key","type","name","checked","style","marginLeft","e","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca261921.chunk.js","sourcesContent":["import React from 'react';\n\nclass Input extends React.Component {\n    state = {\n        word: ''\n    }\n\n    handleChange = (event) => {\n        const value = event.target.value;\n        if(isNaN(value) && value!=='-') {\n            return;\n        }\n        this.setState({ word: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if(this.state.word.trim() !== '') {\n            this.props.validateAnswer(this.state.word);\n            this.setState({ word: '' });\n        }\n    }\n\n    render () {\n        return (\n            <>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        placeholder=\"Enter your answer here\"\n                        value={this.state.word}\n                        onChange={this.handleChange}\n                        autoFocus\n                    />\n                </form>\n            </>\n        )\n    }  \n}\n\nexport default Input;","import React from 'react';\n\nexport default function Score(props) {\n    return (\n        <div className=\"scoreContainer\">\n            <span className=\"speed\">\n                {props.speed}\n            </span>\n            &nbsp;<span className=\"passive\">calculations per minute, score: </span>&nbsp; \n            <span className=\"score passive\">\n                {props.score} \n            </span>\n        </div>\n    )\n}","import React from 'react';\n\nimport Input from './components/input';\nimport Score from './components/score';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  state = {\n    errorMessage: '',\n    error: false,\n    words: [],\n    score :0,\n    modes: ['multiply', 'add', 'subtract'],\n    mode: 'multiply',\n    x: 0,\n    y: 0,\n    maxLimitX: 2,\n    maxLimitY: 1,\n    solution: 0,\n    startTime: new Date(),\n    speed: 0\n  }\n\n  componentDidMount() {\n    this.generatePuzzle();\n  }\n\n  generatePuzzle = () => {\n    const { maxLimitX, maxLimitY, mode } = this.state;\n    let i=0, x=0, y=0;\n    while(i<maxLimitX) {\n      x = x*10 + Math.floor(Math.random()*10);\n      i++;\n    }\n    i=0;\n    while(i<maxLimitY) {\n      y = y*10 + Math.floor(Math.random()*10);\n      i++;\n    }\n    const solution = mode==='multiply' ? (x*y) : mode==='add' ? (x+y) : (x-y);\n    this.setState({ x, y, solution });\n  }\n\n  resetState = (mode='multiply') => {\n    this.setState({\n      score: 0,\n      speed: 0,\n      words: [],\n      mode,\n      error: false,\n      errorMessage: '',\n      solution: -999999,\n    }, () => {\n      this.generatePuzzle();\n    });\n  }\n  changeMode = (value) => {\n    this.resetState(value);\n  }\n\n  validateAnswer = (word) => {\n    const answer = parseInt(word);\n    const { solution, mode } = this.state;\n    if(answer !== solution) {\n      this.setState({ error: true, errorMessage: `Not the right answer`});\n    }\n    else {\n      if(this.state.score === 0) {\n        this.setState({ speed: 1 });\n        this.startTimer();\n      } \n      else\n        this.endTimer();\n      this.setState({ error: false, score: this.state.score+1 });\n      this.generatePuzzle();\n    }\n  }\n\n  startTimer = () => {\n    this.setState({ startTime: new Date() });\n  };\n  \n  endTimer = () => {\n    if(this.state.score === 0)\n      return; \n    let endTime = new Date();\n    var timeDiff = endTime - this.state.startTime; //in ms\n    //Strip the ms, convert to minutes.\n    timeDiff /= 1000*60;\n    let speed = Math.round(this.state.score/timeDiff, 3);\n    //console.log(speed);\n    this.setState({ speed });\n  }\n\n  getModeSymbol = () => {\n    const { mode } = this.state;\n    switch(mode) {\n      case 'multiply':\n        return 'x';\n      case 'add':\n        return '+';\n      case 'subtract':\n        return '-';\n      default:\n        return 'x';\n    }\n  }\n\n  changeMax = (dimension, value, mode) => {\n    this.setState({ [dimension]: value }, this.resetState(mode));\n  }\n\n  render() {\n    const { x, y, maxLimitX, maxLimitY, modes, mode } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          PLAYER OF NUMBERS\n        </div>\n        <div className=\"mode\">\n          <div className=\"item active\">{x} {this.getModeSymbol()} {y}</div>\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"suffix\">\n            {\n              modes.map((item, index) => {\n                return (\n                <span key={index} className={mode===item ? 'activeMode' : ''}>\n                  <input\n                    type=\"radio\"\n                    name=\"suffix\"\n                    checked={mode==item}\n                    onChange={()=>this.changeMode(item)}\n                  />\n                  {item}\n                </span>\n              )})\n            }\n            <span style={{ marginLeft: '25px'}}>Limit LHS to</span> <input\n                    type=\"text\"\n                    name=\"limit\"\n                    placeholder=\"Ex. 2\"\n                    onChange={(e)=>this.changeMax('maxLimitX', e.target.value, mode)}\n                    value={maxLimitX}\n                    className=\"limitInput\"\n                  /><span> digits</span>\n            <span style={{ marginLeft: '25px'}}>Limit RHS to</span> <input\n                    type=\"text\"\n                    name=\"limit\"\n                    placeholder=\"Ex. 1\"\n                    onChange={(e)=>this.changeMax('maxLimitY', e.target.value, mode)}\n                    value={maxLimitY}\n                    className=\"limitInput\"\n                  /><span> digits</span>\n          </div>\n        </div>\n        <button className=\"reset\" onClick={()=>this.resetState(mode)}>\n          Reset\n        </button>\n        <Input validateAnswer={this.validateAnswer} />\n        <div className=\"errorMessage\">\n          {\n            this.state.error &&\n            this.state.errorMessage\n          }\n         </div>\n        <Score\n          score={this.state.score}\n          speed={this.state.speed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}